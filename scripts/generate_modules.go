//go:build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func main() {
	type moduleInfo struct {
		ImportPath string
		PkgName    string
	}

	var modules []moduleInfo

	// Walk internal directory
	err := filepath.Walk("internal/modules", func(path string, info os.FileInfo, err error) error {
		if err != nil || !info.IsDir() {
			return err
		}

		// Check for module.go existence
		moduleFile := filepath.Join(path, "module.go")
		if _, err := os.Stat(moduleFile); err != nil {
			return nil // Skip directories without module.go
		}

		// Parse package name
		fset := token.NewFileSet()
		f, err := parser.ParseFile(fset, moduleFile, nil, parser.PackageClauseOnly)
		if err != nil {
			return fmt.Errorf("error parsing %s: %w", moduleFile, err)
		}

		modules = append(modules, moduleInfo{
			ImportPath: filepath.ToSlash(strings.TrimPrefix(path, "internal/")),
			PkgName:    f.Name.Name,
		})
		return nil
	})

	if err != nil {
		log.Fatal(err)
	}

	// Generate code
	tpl := `// Code generated by go generate; DO NOT EDIT.
package gen

import (
    "go.uber.org/dig"
    {{ range .Modules }}
	"github.com/fdddf/digin/internal/{{ .ImportPath }}"{{ end }}
)

func AutoRegister(container *dig.Container) {
    {{- range .Modules }}
    {{ .PkgName }}.Register(container){{ end }}
}
`

	tmpl := template.Must(template.New("").Parse(tpl))
	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, struct{ Modules []moduleInfo }{modules}); err != nil {
		log.Fatal(err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal("Format error:", err, "\nOriginal code:\n", buf.String())
	}

	if err := os.WriteFile("internal/gen/modules.go", formatted, 0644); err != nil {
		log.Fatal(err)
	}
}
